﻿rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // === YARDIMCI FONKSİYONLAR ===
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // === USERS KOLEKSİYONU ===
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isVerifiedUser() && (request.auth.uid == userId || isAdmin()) && validateUpdateTimestamps('createdAt', 'updatedAt');
      allow create: if isVerifiedUser() && request.auth.uid == userId && requireCreatedAt('createdAt');
    }

    // === GAMES & YORUMLAR ===
    match /games/{gameId} {
      allow read: if true;
      allow update: if isVerifiedUser() && validateUpdateTimestamps('createdAt', 'updatedAt');
      allow create, delete: if isAdmin();
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isVerifiedUser() && request.resource.data.uid == request.auth.uid &&
                              requireCreatedAt('createdAt') &&
                              request.resource.data.text is string &&
                              request.resource.data.text.size() <= 1000;
        allow delete: if isVerifiedUser() && (isAdmin() || resource.data.uid == request.auth.uid);
      }
    }
    
    // === GERİ BİLDİRİM ===
    match /feedback/{feedbackId} {
      allow create: if isVerifiedUser() && requireCreatedAt('createdAt');
      allow read, update, delete: if isAdmin();
    }

    // === SOHBET SİSTEMİ ===
    match /chat_meta/{docId} {
      allow read: if isAuthenticated();
      allow write: if isVerifiedUser() && validateUpdateTimestamps('createdAt', 'updatedAt');
    }

    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isVerifiedUser() && (
        request.resource.data.uid == request.auth.uid || 
        (request.resource.data.uid == 'system' && isAdmin())
      ) && requireCreatedAt('createdAt') &&
      request.resource.data.text is string && request.resource.data.text.size() <= 2000;
      allow delete: if isVerifiedUser() && (isAdmin() || resource.data.uid == request.auth.uid);
    }

    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in chatId.split('_');

      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in chatId.split('_');
        allow create: if isVerifiedUser()
                     && request.auth.uid in chatId.split('_')
                     && request.resource.data.senderId == request.auth.uid
                     && requireCreatedAt('createdAt')
                     && request.resource.data.text is string
                     && request.resource.data.text.size() <= 2000;
        allow update, delete: if false;
      }
    }

    // === ADMIN DM SİSTEMİ ===
    match /admin_dms/{dmId} {
      allow read: if isVerifiedUser() && (
        resource.data.uid == request.auth.uid || 
        isAdmin()
      );
      allow create: if isVerifiedUser() && requireCreatedAt('createdAt');
      allow update, delete: if isAdmin();
    }

    // === CHAT ROOM SİSTEMİ ===
    match /chat_rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isVerifiedUser() && requireCreatedAt('createdAt');
      allow update, delete: if isAdmin();

      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isVerifiedUser() && request.resource.data.uid == request.auth.uid &&
                              requireCreatedAt('createdAt') &&
                              request.resource.data.text is string &&
                              request.resource.data.text.size() <= 2000;
        allow delete: if isVerifiedUser() && (isAdmin() || resource.data.uid == request.auth.uid);
      }
    }

    // === ÖZEL ODA MESAJLARI ===
    match /private_room_messages/{roomId} {
      allow read: if isVerifiedUser() && (
        resource.data.members[request.auth.uid] == true ||
        isAdmin()
      );
      allow create: if isVerifiedUser() && request.resource.data.uid == request.auth.uid &&
                            requireCreatedAt('createdAt');
      allow update, delete: if isAdmin();
    }

    // === SİSTEM BİLDİRİMLERİ ===
    match /notifications/{notificationId} {
      allow read: if isVerifiedUser() && (
        resource.data.uid == request.auth.uid ||
        resource.data.type == 'global' ||
        isAdmin()
      );
      allow create: if isAdmin();
      allow update: if isVerifiedUser() && resource.data.uid == request.auth.uid && validateUpdateTimestamps('createdAt', 'updatedAt');
      allow delete: if isVerifiedUser() && (
        resource.data.uid == request.auth.uid ||
        isAdmin()
      );
    }

    // === KLAN SİSTEMİ ===
    match /clans/{clanId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.leaderId;
      allow update: if isVerifiedUser() && (
        request.auth.uid == resource.data.leaderId ||
        (resource.data.members[request.auth.uid] == 'officer' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'logo'])) ||
        isAdmin()
      ) && validateUpdateTimestamps('createdAt', 'updatedAt');
      allow delete: if isVerifiedUser() && (request.auth.uid == resource.data.leaderId || isAdmin());

      match /members/{memberId} {
        allow read: if true;
        allow create: if isVerifiedUser() && request.auth.uid == memberId && requireCreatedAt('joinedAt');
        allow update: if isVerifiedUser() && (
          request.auth.uid == memberId ||
          request.auth.uid == get(/databases/$(database)/documents/clans/$(clanId)).data.leaderId ||
          (get(/databases/$(database)/documents/clans/$(clanId)).data.members[request.auth.uid] == 'officer' && request.resource.data.role in ['member', 'officer']) ||
          isAdmin()
        ) && validateUpdateTimestamps('joinedAt', 'updatedAt');
        allow delete: if isVerifiedUser() && (
          request.auth.uid == memberId ||
          request.auth.uid == get(/databases/$(database)/documents/clans/$(clanId)).data.leaderId ||
          isAdmin()
        );
      }

      match /messages/{messageId} {
        allow read: if isVerifiedUser() && get(/databases/$(database)/documents/clans/$(clanId)/members/$(request.auth.uid)).exists;
        allow create: if isVerifiedUser() && get(/databases/$(database)/documents/clans/$(clanId)/members/$(request.auth.uid)).exists &&
                              request.resource.data.uid == request.auth.uid &&
                              requireCreatedAt('createdAt') &&
                              request.resource.data.text is string &&
                              request.resource.data.text.size() <= 2000;
        allow delete: if isVerifiedUser() && (
          request.auth.uid == resource.data.uid ||
          request.auth.uid == get(/databases/$(database)/documents/clans/$(clanId)).data.leaderId ||
          isAdmin()
        );
      }
    }
  }
}
